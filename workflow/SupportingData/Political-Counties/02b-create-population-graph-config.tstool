StartLog(LogFile="02b-create-population-graph-config.tstool.log",MaxSize="100000000")
# Create the county population graph configurations
# - use the SQLite database of county population data that was created in the previous step
#
# Time Series Identification
# ==========================
#
# Time series are identified as follows:
# - uniqueness is an issue because Denver and Broomfield are both counties and municipalities,
#   so use the LocType part of time series identifier and part type in the alias
# - use characters that are allowed on Windows and Linux command line and URLs,
#   avoid characters that require URL-encoding,
#   so use '_' rather than ':' in filenames where LocType is used
# - use county and municipality names without spaces for filenames to
#   simplify command-line access and avoid URL-encoding
# - might need to introduce scenario into the TSID, such as 'baseline',
#   as per typical TSTool TSID, in which case the alias and TSID will have another part
#
# Description                                           LocType   LocID   DataSource DataType             Interval       Alias                                    TSID                                         Time Series Files
# ----------------------------------------------------- --------- ------- ---------- -------------------- -------------- ---------------------------------------- -------------------------------------------- ----------------------------------------------
# DOLA county hist. est. & forecast population (total)  County    County  DOLA       Population-Total     Year           Denver-County-Population-Total           County:Denver.DOLA.Population-Total.Year     County_Denver.DOLA.Population-Total.Year.dv
# DOLA county hist. est. population (unincorporated)    County    County  DOLA       Population-Unincorp  Year           Denver-County-Population-Unincorp        County:Denver.DOLA.Population-Unincorp.Year  County_Denver.DOLA.Population-Unincorp.Year.dv
# DOLA county hist. est. population (muni total)        County    County  DOLA       Population-Muni      Year           Denver-County-Population-Muni            County:Denver.DOLA.Population-Muni.Year      County_Denver.DOLA.Population-Muni.Year.dv
#
# DOLA municipal hist. est. population (total)          Muni      OWFID   DOLA       Population-Total     Year           Denver-Muni-Population-Total             Muni:Denver.DOLA.Population.Year             Muni_Denver.DOLA.Population.Year.dv
# DOLA municipal hist. est. population (county part)    MuniPart  OWFID   DOLA       Population-Total     Year           Arvada-Adams-MuniPart-Population-Total   MuniPart:Arvada_Adams.DOLA.Population.Year   MuniPart_Arvada_Adams.DOLA.Population.Year.dv
#
# DOLA forecast population (total)                      County    County  DOLA       Population-Forecast  Year           Denver-County-Population-Forecast-Total  County:Denver.DOLA.Population-Forecast.Year  County_Denver.DOLA.Population-Forecast.Year.dv
#
#===================================================================
# Define properties to control processing.
# - use relative paths so that the command file is portable
# - AssetsFolder is where map files exist for the InfoMapper tool
SetProperty(PropertyName="AppFolder",PropertyType=String,PropertyValue="../../../web")
SetProperty(PropertyName="MapsFolder",PropertyType=String,PropertyValue="${AppFolder}/data-maps")
#SetProperty(PropertyName="CountiesMapFolder",PropertyType=String,PropertyValue="${MapsFolder}/BasinEntities/Political-Counties")
SetProperty(PropertyName="CountiesMapFolder",PropertyType=String,PropertyValue="${MapsFolder}/SupportingData/Political-Counties")
SetProperty(PropertyName="CountiesTsFolder",PropertyType=String,PropertyValue="${CountiesMapFolder}/ts")
#SetProperty(PropertyName="MunicipalitiesMapFolder",PropertyType=String,PropertyValue="${MapsFolder}/BasinEntities/Municipal-Municipalities")
SetProperty(PropertyName="MunicipalitiesMapFolder",PropertyType=String,PropertyValue="${MapsFolder}/SupportingData/Municipal-Municipalities")
SetProperty(PropertyName="MunicipalitiesTsFolder",PropertyType=String,PropertyValue="${MunicipalitiesMapFolder}/ts")
#
SetProperty(PropertyName="HistPopulationStart",PropertyType=DateTime,PropertyValue="1980")
SetProperty(PropertyName="HistPopulationEnd",PropertyType=DateTime,PropertyValue="2018")
SetProperty(PropertyName="ForecastPopulationStart",PropertyType=DateTime,PropertyValue="2019")
SetProperty(PropertyName="ForecastPopulationEnd",PropertyType=DateTime,PropertyValue="2050")
#
# Set the following to true to write files, false to not write files
# - useful for troubleshooting
#SetProperty(PropertyName="CreateFiles",PropertyType=String,PropertyValue="true")
#SetProperty(PropertyName="CreateFiles",PropertyType=String,PropertyValue="false")
#
# Create the output folders for time series
CreateFolder(Folder="${CountiesTsFolder}",CreateParentFolders=True,IfFolderExists=Ignore)
CreateFolder(Folder="${MunicipalitiesTsFolder}",CreateParentFolders=True,IfFolderExists=Ignore)
#===================================================================
#
# Open the datastore for the SQLite database
OpenDataStore(DataStoreName="CountyDatabase",DataStoreType="GenericDatabaseDataStore",DatabaseEngine="SQLite",ServerName="db/counties.db")
# Use the following for troubleshooting.
ReadTableFromDataStore(DataStore="CountyDatabase",DataStoreTable="county_pop_estimate_dola",TableID="county_pop_estimate_dola")
ReadTableFromDataStore(DataStore="CountyDatabase",DataStoreTable="population_forecast_dola",TableID="population_forecast_dola")
#===================================================================
#
# Get the unique list of counties to use in loops.
ReadTableFromDataStore(DataStore="CountyDatabase",Sql="SELECT * FROM county_dola ORDER BY county",TableID="CountyListTable")
#===================================================================
#
# Process the county historical total data into time series
# - set the period to the historical and forecast period for full analysis time series
For(Name="For_Counties_Population_Total",IteratorProperty="County",TableID="CountyListTable",TableColumn="county",TablePropertyMap="county_upper:county_upper,county_no_space:county_no_space")
# First get the data records from the database.
ReadTableFromDataStore(DataStore="CountyDatabase",Sql="SELECT * FROM county_pop_estimate_dola WHERE municipalityname = '${county_upper} COUNTY' ORDER BY year",TableID="${county_no_space}_County_Population_Total_Table")
# Convert the data records to a time series.
TableToTimeSeries(TableID="${county_no_space}_County_Population_Total_Table",DateColumn="year",LocationID="${county_no_space}",LocationType="County",ValueColumn="totalpopulation",DataSource="DOLA",DataType="Population-Total",Interval=Year,Units="persons",Alias="%L-County-%T",InputStart="${HistPopulationStart}",InputEnd="${ForecastPopulationEnd}")
# Write the time series files
# - actually, this time series is modified later when forecasts are added so don't write here
# WriteDelimitedFile(TSList=AllMatchingTSID,TSID="${county_no_space}-County-Population-Total",OutputFile="${CountiesTsFolder}/County_${county_no_space}.DOLA.Population-Total.Year.csv",DateTimeColumn="year",ValueColumns="population",Precision=0)
# WriteDateValue(TSList=AllMatchingTSID,TSID="${county_no_space}-County-Population-Total",OutputFile="${CountiesTsFolder}/County_${county_no_space}.DOLA.Population-Total.Year.dv",Precision=0)
EndFor(Name="For_Counties_Population_Total")
#===================================================================
#
# Process the county historical unincorporated area data into time series
For(Name="For_Counties_Population_Unincorp",IteratorProperty="County",TableID="CountyListTable",TableColumn="county",TablePropertyMap="county_upper:county_upper,county_no_space:county_no_space")
# First get the data records from the database.
ReadTableFromDataStore(DataStore="CountyDatabase",Sql="SELECT * FROM county_pop_estimate_dola WHERE municipalityname = '${County} Unincorp. Area' ORDER BY year",TableID="${county_no_space}_County_Population_Unincorported_Table")
# Convert the data records to a time series.
TableToTimeSeries(TableID="${county_no_space}_County_Population_Unincorported_Table",DateColumn="year",LocationID="${county_no_space}",LocationType="CountyUnincorporated",ValueColumn="totalpopulation",DataSource="DOLA",DataType="Population-Unincorp",Interval=Year,Units="persons",Alias="%L-County-%T")
# Write the time series files
WriteDelimitedFile(TSList=AllMatchingTSID,TSID="${county_no_space}-County-Population-Unincorp",OutputFile="${CountiesTsFolder}/County_${county_no_space}.DOLA.Population-Unincorp.Year.csv",DateTimeColumn="year",ValueColumns="population",Precision=0)
WriteDateValue(TSList=AllMatchingTSID,TSID="${county_no_space}-County-Population-Unincorp",OutputFile="${CountiesTsFolder}/County_${county_no_space}.DOLA.Population-Unincorp.Year.dv",Precision=0)
EndFor(Name="For_Counties_Population_Unincorp")
#===================================================================
#
# Process the county historical muni/county area data into time series
# - all non-county and non-total time series
For(Name="For_Counties_Population_Muni",IteratorProperty="CountyFIPS",TableID="CountyListTable",TableColumn="countyfips",TablePropertyMap="county_upper:county_upper,county_no_space:county_no_space")
# First get the data records from the database.
ReadTableFromDataStore(DataStore="CountyDatabase",Sql="SELECT * FROM county_pop_estimate_dola WHERE ((countyfips = ${CountyFIPS}) AND (municipalityname NOT LIKE '%COUNTY%') AND (municipalityname NOT LIKE '%(Total)%') AND (municipalityname NOT LIKE '%Unincorp%')) ORDER BY year",TableID="${county_no_space}_County_Population_Muni_Table")
# Convert the data records to a time series.
TableToTimeSeries(TableID="${county_no_space}_County_Population_Muni_Table",DateColumn="year",LocationID="${county_no_space}",LocationType="CountyMuni",ValueColumn="totalpopulation",DataSource="DOLA",DataType="Population-Muni",Interval=Year,Units="persons",HandleDuplicatesHow=Add,Alias="%L-County-%T")
# Write the time series files
WriteDelimitedFile(TSList=AllMatchingTSID,TSID="${county_no_space}-County-Population-Muni",OutputFile="${CountiesTsFolder}/County_${county_no_space}.DOLA.Population-Muni.Year.csv",DateTimeColumn="year",ValueColumns="population",Precision=0)
WriteDateValue(TSList=AllMatchingTSID,TSID="${county_no_space}-County-Population-Muni",OutputFile="${CountiesTsFolder}/County_${county_no_space}.DOLA.Population-Muni.Year.dv",Precision=0)
EndFor(Name="For_Counties_Population_Muni")
#===================================================================
#
# Process county historical muni data into time series
# - counties have placefips=0 and unincorporated areas have 'Unincorp' in municipalityname
# - some municipalities are in more than one county and have '(Total)' in the name, so remove
# - some municipalities have the same name as counties so filter out
ReadTableFromDataStore(DataStore="CountyDatabase",Sql="SELECT DISTINCT municipalityname FROM county_pop_estimate_dola WHERE ((placefips != 0) AND (municipalityname NOT LIKE '%Unincorp%') AND (municipalityname NOT LIKE '%Part%') AND (municipalityname NOT LIKE '%COUNTY%')) ORDER BY municipalityname",TableID="MunicipalityListTable")
ManipulateTableString(TableID="MunicipalityListTable",InputColumn1="municipalityname",Operator="Remove",InputValue2="\s(Total)",OutputColumn="dola_municipality")
#
For(Name="For_Municipalities",IteratorProperty="Municipality",TableID="MunicipalityListTable",TableColumn="dola_municipality")
# First get the data records from the database.
ReadTableFromDataStore(DataStore="CountyDatabase",Sql="SELECT * FROM county_pop_estimate_dola WHERE ((municipalityname LIKE '%${Municipality}%') AND (municipalityname NOT LIKE '%Part%') AND (municipalityname NOT LIKE '%COUNTY%') AND (municipalityname NOT LIKE '%Unincorp%')) ORDER BY year",TableID="${Municipality}_Municipality_Data_Table")
# Convert the data records to a time series.
TableToTimeSeries(TableID="${Municipality}_Municipality_Data_Table",DateColumn="year",LocationID="${Municipality}",LocationType="Municipality",ValueColumn="totalpopulation",DataSource="DOLA",DataType="Population",Interval=Year,Units="persons",Alias="%L-Municipality-%T-%I")
# Write the time series files
# - TODO smalers 2020-10-19 need to read the OWF municipalities to get the identifier
#WriteDelimitedFile(TSList=AllMatchingTSID,TSID="${county_no_space}-County-Population-Muni",OutputFile="${CountiesTsFolder}/County_${county_no_space}.DOLA.Population-Muni.Year.csv",DateTimeColumn="year",ValueColumns="population",Precision=0)
#WriteDateValue(TSList=AllMatchingTSID,TSID="${county_no_space}-County-Population-Muni",OutputFile="${CountiesTsFolder}/County_${county_no_space}.DOLA.Population-Muni.Year.dv",Precision=0)
EndFor(Name="For_Municipalities")
#===================================================================
#
# Process the county forecast data into time series
# - also set the forecasted county population total into the main population time series
For(Name="For_Counties_Forecast",IteratorProperty="County",TableID="CountyListTable",TableColumn="county",TablePropertyMap="county_upper:county_upper,county_no_space:county_no_space")
# First get the data records from the database.
ReadTableFromDataStore(DataStore="CountyDatabase",Sql="SELECT * FROM population_forecast_dola WHERE county = '${County}' ORDER BY year",TableID="${county_no_space}_County_Population_Forecast_Table")
# Convert the data records to a time series.
TableToTimeSeries(TableID="${county_no_space}_County_Population_Forecast_Table",DateColumn="year",LocationID="${county_no_space}",LocationType="County",ValueColumn="population_forecast",DataSource="DOLA",DataType="Population-Forecast",Interval=Year,Units="persons",Alias="%L-County-%T",InputStart="${ForecastPopulationStart}",InputEnd="${ForecastPopulationEnd}")
SetFromTS(TSList=AllMatchingTSID,TSID="${county_no_space}-County-Population-Total",IndependentTSList=AllMatchingTSID,IndependentTSID="${county_no_space}-County-Population-Forecast",SetStart="${ForecastPopulationStart}",SetEnd="${ForecastPopulationEnd}",TransferHow=ByDateTime,SetFlag="F",SetFlagDesc="DOLA Forecast",RecalcLimits=True)
# Write the time series files
WriteDelimitedFile(TSList=AllMatchingTSID,TSID="${county_no_space}-County-Population-Forecast",OutputFile="${CountiesTsFolder}/County_${county_no_space}.DOLA.Population-Forecast.Year.csv",DateTimeColumn="year",ValueColumns="population",Precision=0)
WriteDateValue(TSList=AllMatchingTSID,TSID="${county_no_space}-County-Population-Forecast",OutputFile="${CountiesTsFolder}/County_${county_no_space}.DOLA.Population-Forecast.Year.dv",Precision=0)
# Write the main time series since data where added
WriteDelimitedFile(TSList=AllMatchingTSID,TSID="${county_no_space}-County-Population-Total",OutputFile="${CountiesTsFolder}/County_${county_no_space}.DOLA.Population-Total.Year.csv",DateTimeColumn="year",ValueColumns="population",Precision=0)
WriteDateValue(TSList=AllMatchingTSID,TSID="${county_no_space}-County-Population-Total",OutputFile="${CountiesTsFolder}/County_${county_no_space}.DOLA.Population-Total.Year.dv",Precision=0)
EndFor(Name="For_Counties_Forecast")
#===================================================================
#
# Create graph configuration file for use with InfoMapper
# - only need to do this once
# - use Larimer County as the example
ProcessTSProduct(TSProductFile="graphs/county-population-graph-config.tsp",View=True,OutputFile="graphs/county-population-graph-prototype.png",OutputProductFile="graphs/county-population-graph-config-prototype.json",OutputProductFormat="JSON")
#
# Convert the prototype graph into a template by replacing strings with ${Property} notation
# - convert prototype Larimer to property that can be filled by InfoMapper
# Copy the prototype to the final name for further editing below
CopyFile(InputFile="graphs/county-population-graph-config-prototype.json",OutputFile="graphs/county-population-graph-config.json",IfInputNotFound=Warn)
# Edit TSID
# - first part of the string will have been replaced above
# - final step corrects a replace from previous steps
# Front part of TSID and TSAlias
TextEdit(InputFile="graphs/county-population-graph-config.json",SearchFor="Larimer-",ReplaceWith="\${featureAttribute:county}.toMixedCase().replace(' ','')-",OutputFile="graphs/county-population-graph-config.json")
TextEdit(InputFile="graphs/county-population-graph-config.json",SearchFor="Larimer\.",ReplaceWith="\${featureAttribute:county}.toMixedCase().replace(' ','').",OutputFile="graphs/county-population-graph-config.json")
# File names for TSID
TextEdit(InputFile="graphs/county-population-graph-config.json",SearchFor="Population-Total.Year",ReplaceWith="Population-Total\.Year~dv~ts/County_\${featureAttribute:county}.toMixedCase().replace(' ','')\.DOLA\.Population-Total\.Year\.dv",OutputFile="graphs/county-population-graph-config.json")
TextEdit(InputFile="graphs/county-population-graph-config.json",SearchFor="Population-Muni.Year",ReplaceWith="Population-Muni\.Year~dv~ts/County_\${featureAttribute:county}.toMixedCase().replace(' ','')\.DOLA\.Population-Muni\.Year\.dv",OutputFile="graphs/county-population-graph-config.json")
TextEdit(InputFile="graphs/county-population-graph-config.json",SearchFor="Population-Unincorp.Year",ReplaceWith="Population-Unincorp\.Year~dv~ts/County_\${featureAttribute:county}.toMixedCase().replace(' ','')\.DOLA\.Population-Unincorp\.Year\.dv",OutputFile="graphs/county-population-graph-config.json")
TextEdit(InputFile="graphs/county-population-graph-config.json",SearchFor="Population-Forecast.Year",ReplaceWith="Population-Forecast\.Year~dv~ts/County_\${featureAttribute:county}.toMixedCase().replace(' ','')\.DOLA\.Population-Forecast\.Year\.dv",OutputFile="graphs/county-population-graph-config.json")
# Edit remaining county name, such as title
TextEdit(InputFile="graphs/county-population-graph-config.json",SearchFor="Larimer",ReplaceWith="\${featureAttribute:county}.toMixedCase()",OutputFile="graphs/county-population-graph-config.json")
