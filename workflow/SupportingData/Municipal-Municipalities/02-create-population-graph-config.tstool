StartLog(LogFile="02-create-population-graph-config.tstool.log",MaxSize="50000000")
# Create the municipal population graph configurations
# - use the SQLite database of municipality population data that was created when processing
#
#
# Time Series Identification (copy of the Political-Counties information)
# ==========================
#
# Time series are identified as follows:
# - uniqueness is an issue because Denver and Broomfield are both counties and municipalities,
#   so use the LocType part of time series identifier and part type in the alias
# - use characters that are allowed on Windows and Linux command line and URLs,
#   avoid characters that require URL-encoding,
#   so use '_' rather than ':' in filenames where LocType is used
# - use county and municipality names without spaces for filenames to
#   simplify command-line access and avoid URL-encoding
# - might need to introduce scenario into the TSID, such as 'baseline',
#   as per typical TSTool TSID, in which case the alias and TSID will have another part
#
# Description                                           LocType   LocID   DataSource DataType             Interval       Alias                                    TSID                                         Time Series Files
# ----------------------------------------------------- --------- ------- ---------- -------------------- -------------- ---------------------------------------- -------------------------------------------- ----------------------------------------------
# DOLA county hist. est. & forecast population (total)  County    County  DOLA       Population-Total     Year           Denver-County-Population-Total           County:Denver.DOLA.Population-Total.Year     County_Denver.DOLA.Population-Total.Year.dv
# DOLA county hist. est. population (unincorporated)    County    County  DOLA       Population-Unincorp  Year           Denver-County-Population-Unincorp        County:Denver.DOLA.Population-Unincorp.Year  County_Denver.DOLA.Population-Unincorp.Year.dv
# DOLA county hist. est. population (muni total)        County    County  DOLA       Population-Muni      Year           Denver-County-Population-Muni            County:Denver.DOLA.Population-Muni.Year      County_Denver.DOLA.Population-Muni.Year.dv
#
# DOLA municipal hist. est. population (total)          Muni      OWFID   DOLA       Population-Total     Year           Denver-Muni-Population-Total             Muni:Denver.DOLA.Population.Year             Muni_Denver.DOLA.Population.Year.dv
# DOLA municipal hist. est. population (county part)    MuniPart  OWFID   DOLA       Population-Total     Year           Arvada-Adams-MuniPart-Population-Total   MuniPart:Arvada_Adams.DOLA.Population.Year   MuniPart_Arvada_Adams.DOLA.Population.Year.dv
#
# DOLA forecast population (total)                      County    County  DOLA       Population-Forecast  Year           Denver-County-Population-Forecast-Total  County:Denver.DOLA.Population-Forecast.Year  County_Denver.DOLA.Population-Forecast.Year.dv
#
#===================================================================
# Define properties to control processing.
# - use relative paths so that the command file is portable
# - AssetsFolder is where map files exist for the InfoMapper tool
SetProperty(PropertyName="AppFolder",PropertyType=String,PropertyValue="../../../web")
SetProperty(PropertyName="MapsFolder",PropertyType=String,PropertyValue="${AppFolder}/data-maps")
SetProperty(PropertyName="CountiesMapFolder",PropertyType=String,PropertyValue="${MapsFolder}/SupportingData/Political-Counties")
SetProperty(PropertyName="CountiesTsFolder",PropertyType=String,PropertyValue="${CountiesMapFolder}/ts")
SetProperty(PropertyName="MunicipalitiesMapFolder",PropertyType=String,PropertyValue="${MapsFolder}/SupportingData/Municipal-Municipalities")
SetProperty(PropertyName="MunicipalitiesTsFolder",PropertyType=String,PropertyValue="${MunicipalitiesMapFolder}/ts")
#
SetProperty(PropertyName="HistPopulationStart",PropertyType=DateTime,PropertyValue="1980")
SetProperty(PropertyName="HistPopulationEnd",PropertyType=DateTime,PropertyValue="2018")
SetProperty(PropertyName="ForecastPopulationStart",PropertyType=DateTime,PropertyValue="2019")
SetProperty(PropertyName="ForecastPopulationEnd",PropertyType=DateTime,PropertyValue="2050")
#
# Create the output folders for time series
CreateFolder(Folder="${MunicipalitiesTsFolder}",CreateParentFolders=True,IfFolderExists=Ignore)
#===================================================================
#
# Open the datastore for the SQLite database
OpenDataStore(DataStoreName="CountyDatabase",DataStoreType="GenericDatabaseDataStore",DatabaseEngine="SQLite",ServerName="../Political-Counties/db/counties.db")
# Use the following for troubleshooting.
ReadTableFromDataStore(DataStore="CountyDatabase",DataStoreTable="county_pop_estimate_dola",TableID="county_pop_estimate_dola")
#===================================================================
#
# Get the unique list of counties to use in loops.
ReadTableFromDataStore(DataStore="CountyDatabase",Sql="SELECT * FROM county_dola ORDER BY county",TableID="CountyListTable")
# Get the unique list of municipalities to use in loops (from OWF dataset).
# - add a FIPS_ID_int as integer to be able to join with DOLA FIPS ID, which does not have leading zeros.
ReadTableFromDelimitedFile(TableID="MunicipalityList_OWF_Table",InputFile="downloads\municipalities-owf.csv",HeaderLines="1",IntegerColumns="NumCounty,Num_IBCC_Basin",TextColumns="FIPS_ID,GNIS_ID")
ManipulateTableString(TableID="MunicipalityList_OWF_Table",InputColumn1="FIPS_ID",Operator="ToInteger",OutputColumn="FIPS_ID_int")
#===================================================================
#
# Get the unique list of municipalities to use in loops.
# - counties have placefips=0 and unincorporated areas have 'Unincorp' in municipalityname
# - some municipalities are in more than one county and have '(Total)' in the name, so remove
# - some municipalities have the same name as counties so filter out
# - because of possible numerous differenes in municipality name spelling,
#   join on FIPS ID, but need to format consistently in both.
ReadTableFromDataStore(DataStore="CountyDatabase",Sql="SELECT DISTINCT municipalityname, placefips FROM county_pop_estimate_dola WHERE ((placefips != 0) AND (municipalityname NOT LIKE '%Unincorp%') AND (municipalityname NOT LIKE '%Part%') AND (municipalityname NOT LIKE '%COUNTY%')) ORDER BY municipalityname",TableID="MunicipalityList_DOLA_Table")
ManipulateTableString(TableID="MunicipalityList_DOLA_Table",InputColumn1="municipalityname",Operator="Remove",InputValue2="\s(Total)",OutputColumn="dola_municipality")
# Join to OWF municipality list that additional inforamtion such as OWF_ID_Full can be used
# - if the result is not 272 rows (length of OWF dataset), warn
JoinTables(TableID="MunicipalityList_DOLA_Table",TableToJoinID="MunicipalityList_OWF_Table",JoinColumns="placefips:FIPS_ID_int",JoinMethod=JoinIfInBoth,HandleMultipleJoinMatchesHow=UseLastMatch,RowCountProperty="MunicipalityJoinRowCount")
If(Name="If_MunicipalityJoinCount",Condition="${MunicipalityJoinRowCount} != 272")
Message(Message="DOLA and OWF municipality datasets do not align. Expect 272 matches from OWF dataset size.  Found ${MunicipalityJoinRowCount}.",CommandStatus=WARNING)
EndIf(Name="If_MunicipalityJoinCount")
#===================================================================
#
# Process the county historical muni/county area data into time series
# - all non-county and non-total time series
/*
For(Name="For_Counties_Population_Muni",IteratorProperty="CountyFIPS",TableID="CountyListTable",TableColumn="countyfips",TablePropertyMap="county_upper:county_upper,county_no_space:county_no_space")
# First get the data records from the database.
ReadTableFromDataStore(DataStore="CountyDatabase",Sql="SELECT * FROM county_pop_estimate_dola WHERE ((countyfips = ${CountyFIPS}) AND (municipalityname NOT LIKE '%COUNTY%') AND (municipalityname NOT LIKE '%(Total)%') AND (municipalityname NOT LIKE '%Unincorp%')) ORDER BY year",TableID="${county_no_space}_County_Population_Muni_Table")
# Convert the data records to a time series.
TableToTimeSeries(TableID="${county_no_space}_County_Population_Muni_Table",DateColumn="year",LocationID="${county_no_space}",LocationType="CountyMuni",ValueColumn="totalpopulation",DataSource="DOLA",DataType="Population-Muni",Interval=Year,Units="persons",HandleDuplicatesHow=Add,Alias="%L-County-%T")
# Write the time series files
WriteDelimitedFile(TSList=AllMatchingTSID,TSID="${county_no_space}-County-Population-Muni",OutputFile="${CountiesTsFolder}/County_${county_no_space}.DOLA.Population-Muni.Year.csv",DateTimeColumn="year",ValueColumns="population",Precision=0)
WriteDateValue(TSList=AllMatchingTSID,TSID="${county_no_space}-County-Population-Muni",OutputFile="${CountiesTsFolder}/County_${county_no_space}.DOLA.Population-Muni.Year.dv",Precision=0)
EndFor(Name="For_Counties_Population_Muni")
*/
#===================================================================
#
# Process county historical muni data into time series
# - can't query by municipality name because there is some overlap,
#   for example 'Crested Butte' and 'Mount Crested Butte'
# - therefore, iterate using the 'placefips'
#
For(Name="For_Muni_Population",IteratorProperty="dola_municipality",TableID="MunicipalityList_DOLA_Table",TableColumn="dola_municipality",TablePropertyMap="OWF_ID_Full:OWF_ID_Full,placefips:placefips")
# First get the data records from the database.
ReadTableFromDataStore(DataStore="CountyDatabase",Sql="SELECT * FROM county_pop_estimate_dola WHERE ((placefips = ${placefips}) AND (municipalityname NOT LIKE '%Part%') AND (municipalityname NOT LIKE '%COUNTY%') AND (municipalityname NOT LIKE '%Unincorp%')) ORDER BY year",TableID="${OWF_ID_Full}_Municipality_Data_Table")
# Convert the data records to a time series.
TableToTimeSeries(TableID="${OWF_ID_Full}_Municipality_Data_Table",DateColumn="year",LocationID="${OWF_ID_Full}",LocationType="Muni",ValueColumn="totalpopulation",DataSource="DOLA",DataType="Population-Total",Interval=Year,Units="persons",Alias="%L-Muni-%T")
# Write the time series files
# - TODO smalers 2020-10-19 need to read the OWF municipalities to get the identifier, or use MixedCase with no spaces
WriteDelimitedFile(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-Muni-Population-Total",OutputFile="${MunicipalitiesTsFolder}/Muni_${OWF_ID_Full}.DOLA.Population-Total.Year.csv",DateTimeColumn="year",ValueColumns="population",Precision=0)
WriteDateValue(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-Muni-Population-Total",OutputFile="${MunicipalitiesTsFolder}/Muni_${OWF_ID_Full}.DOLA.Population-Total.Year.dv",Precision=0)
EndFor(Name="For_Muni_Population")
#===================================================================
#
# Process the municipality forecast data into time series
# - TODO smalers 2020-10-20 currently don't have this data - does DOLA or someone else publish?
#===================================================================
#
# Create graph template for use with InfoMapper
# - only need to do this once
# - use La Junta municipality as the example
ProcessTSProduct(TSProductFile="graphs/municipality-population-graph-config.tsp",View=True,OutputFile="graphs/municipality-population-graph-prototype.png",OutputProductFile="graphs/municipality-population-graph-config-prototype.json",OutputProductFormat="JSON")
# Copy the prototype to the final name for further editing below
CopyFile(InputFile="graphs/municipality-population-graph-config-prototype.json",OutputFile="graphs/municipality-population-graph-config.json",IfInputNotFound=Warn)
#
# Convert the prototype graph into a template by replacing strings with ${Property} notation
# - convert prototype 'SwinkNoSpace' to property that can be filled by InfoMapper - attribute without space, for files
# - convert prototype 'Swink' to property that can be filled by InfoMapper - attribute as is, for title
# Front part of TSID and TSAlias
TextEdit(InputFile="graphs/municipality-population-graph-config.json",SearchFor="Swink-",ReplaceWith="\${featureAttribute:MunicipalityName}.toMixedCase().replace(' ','')-",OutputFile="graphs/municipality-population-graph-config.json")
TextEdit(InputFile="graphs/municipality-population-graph-config.json",SearchFor="Swink\.",ReplaceWith="\${featureAttribute:MunicipalityName}.toMixedCase().replace(' ','').",OutputFile="graphs/municipality-population-graph-config.json")
# Edit TSID file paths
# - first part of the string will have been replaced above
# - final step corrects a replace from previous steps
TextEdit(InputFile="graphs/municipality-population-graph-config.json",SearchFor="Population-Total.Year",ReplaceWith="Population-Total\.Year~dv~ts/Muni_\$\{featureAttribute:MunicipalityName}.toMixedCase().replace(' ','')\.DOLA\.Population-Total\.Year\.dv",OutputFile="graphs/municipality-population-graph-config.json")
TextEdit(InputFile="graphs/municipality-population-graph-config.json",SearchFor="Population-Muni.Year",ReplaceWith="Population-Muni\.Year~dv~ts/Muni_\$\{featureAttribute:MunicipalityName}.toMixedCase().replace(' ','')\.DOLA\.Population-Muni\.Year\.dv",OutputFile="graphs/municipality-population-graph-config.json")
TextEdit(InputFile="graphs/municipality-population-graph-config.json",SearchFor="Population-Unincorp.Year",ReplaceWith="Population-Unincorp\.Year~dv~ts/Muni_\$\{featureAttribute:MunicipalityName}.toMixedCase().replace(' ','')\.DOLA\.Population-Unincorp\.Year\.dv",OutputFile="graphs/municipality-population-graph-config.json")
TextEdit(InputFile="graphs/municipality-population-graph-config.json",SearchFor="Population-Forecast.Year",ReplaceWith="Population-Forecast\.Year~dv~ts/Muni_\$\{featureAttribute:MunicipalityName}.toMixedCase().replace(' ','')\.DOLA\.Population-Forecast\.Year\.dv",OutputFile="graphs/municipality-population-graph-config.json")
# Edit remaining municipality name, such as title
TextEdit(InputFile="graphs/municipality-population-graph-config.json",SearchFor="Swink",ReplaceWith="\${featureAttribute:MunicipalityName}.toMixedCase()",OutputFile="graphs/municipality-population-graph-config.json")
