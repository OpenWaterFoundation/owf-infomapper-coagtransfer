StartLog(LogFile="02-create-population-graph-config.tstool.log",MaxSize="50000000")
# Create the municipal population graph configurations
# - read the county and municipality time series that were previously created
# - then project the last historical municipal year into the future
#
#
# Time Series Identification (copy of the Political-Counties information)
# ==========================
#
# Time series are identified as follows:
# - uniqueness is an issue because Denver and Broomfield are both counties and municipalities,
#   so use the LocType part of time series identifier and part type in the alias
# - use characters that are allowed on Windows and Linux command line and URLs,
#   avoid characters that require URL-encoding,
#   so use '_' rather than ':' in filenames where LocType is used
# - use county and municipality names without spaces for filenames to
#   simplify command-line access and avoid URL-encoding
# - might need to introduce scenario into the TSID, such as 'baseline',
#   as per typical TSTool TSID, in which case the alias and TSID will have another part
#
# Description                                           LocType   LocID   DataSource DataType             Interval  Alias                                    TSID                                                Time Series Files
# ----------------------------------------------------- --------- ------- ---------- -------------------- --------- ---------------------------------------- --------------------------------------------------- ----------------------------------------------
# DOLA county hist. est. & forecast population (total)  County    County  DOLA       Population-Total     Year      Denver-County-Population-Total           County:Denver.DOLA.Population-Total.Year            County_Denver.DOLA.Population-Total.Year.dv
#
# DOLA municipal hist. est. population (total)          Muni      OWFID   DOLA       Population-Total     Year      Denver-Muni-Population-Total             Muni:Denver.DOLA.Population.Year                    Muni_Denver.DOLA.Population.Year.dv
# DOLA municipal hist. est. population (county part)    MuniPart  OWFID   DOLA       Population-Total     Year      Arvada-Adams-MuniPart-Population-Total   MuniPart:Arvada_Adams.DOLA.Population.Year          MuniPart_Arvada_Adams.DOLA.Population.Year.dv
#
# DOLA forecast population (total)                      County    County  DOLA       Population-Forecast  Year      Denver-County-Population-Forecast-Total  County:Denver.DOLA.Population-Forecast.Year         County_Denver.DOLA.Population-Forecast.Year.dv
#
# For analysis/model (anything computed and not directly provided by DOLA):
#
# Municipal hist. est. population (total)               Muni      OWFID   DOLA       Population-Total     Year      Denver-Muni-Population-Total             Muni:Denver.DOLA.Population-Total.Year              Muni_Denver.DOLA.Population.Year.dv
# Municipal hist. est. population (county part)         MuniPart  OWFID   DOLA       Population-Total     Year      Arvada-Adams-MuniPart-Population-Total   MuniPart:Arvada_Adams.DOLA.Population-Total.Year    MuniPart_Arvada_Adams.DOLA.Population.Year.dv
# Municipal hist. est. & forecast population (total)    Muni      OWFID   Model      Population-Total     Year      Arvada-Muni-Population-Total-Baseline    Muni:Arvada.Model.Population-Total.Year.Baseline    Muni_Arvada.Model.Population-Total.Year.Baseline.dv
# Municipal forecast population                         Muni      OWFID   Model      Population-Forecast  Year      Arvada-Muni-Population-Forecast-Baseline Muni:Arvada.Model.Population-Forecast.Year.Baseline Muni_Arvada.Model.Population-Forecast.Year.Baseline.dv
#
#===================================================================
# Define properties to control processing.
# - read controlling properies from the main confiration Excel file
# - use relative paths so that the command file is portable
# - AssetsFolder is where map files exist for the InfoMapper tool
ReadPropertiesFromExcel(InputFile="../00-Synopsis\scenario-config.xlsx",Worksheet="Baseline-Config",PropertyCellMap="ScenarioId:ScenarioId,ScenarioDescription:ScenarioDescription,StartYear:StartYear,EndYear:EndYear,HistStartYear:HistStartYear,HistEndYear:HistEndYear,ForecastStartYear:ForecastStartYear,ForecastEndYear:ForecastEndYear",IntegerProperties="StartYear,EndYear,HistStartYear,HistEndYear,ForecastStartYear,ForecastEndYear")
SetProperty(PropertyName="AppFolder",PropertyType=String,PropertyValue="../../../web")
SetProperty(PropertyName="MapsFolder",PropertyType=String,PropertyValue="${AppFolder}/data-maps")
SetProperty(PropertyName="SupportingDataCountiesMapFolder",PropertyType=String,PropertyValue="${MapsFolder}/SupportingData/Political-Counties")
SetProperty(PropertyName="SupportingDataCountiesTsFolder",PropertyType=String,PropertyValue="${SupportingDataCountiesMapFolder}/ts")
SetProperty(PropertyName="SupportingDataMunicipalitiesMapFolder",PropertyType=String,PropertyValue="${MapsFolder}/SupportingData/Municipal-Municipalities")
SetProperty(PropertyName="SupportingDataMunicipalitiesTsFolder",PropertyType=String,PropertyValue="${SupportingDataMunicipalitiesMapFolder}/ts")
#
#SetProperty(PropertyName="BaselineScenarioCountiesMapFolder",PropertyType=String,PropertyValue="${MapsFolder}/BaselineScenario/Political-Counties")
#SetProperty(PropertyName="BaselineScenarioCountiesTsFolder",PropertyType=String,PropertyValue="${BaselineScenarioCountiesMapFolder}/ts")
SetProperty(PropertyName="BaselineScenarioMunicipalityPopulationMapFolder",PropertyType=String,PropertyValue="${MapsFolder}/BaselineScenario/02-MunicipalityPopulation")
SetProperty(PropertyName="BaselineScenarioMunicipalityPopulationTsFolder",PropertyType=String,PropertyValue="${BaselineScenarioMunicipalityPopulationMapFolder}/ts")
#
# Create the output folders for time series
CreateFolder(Folder="${BaselineScenarioMunicipalityPopulationTsFolder}",CreateParentFolders=True,IfFolderExists=Ignore)
#===================================================================
#
# Open the datastore for the SQLite database
OpenDataStore(DataStoreName="CountyDatabase",DataStoreType="GenericDatabaseDataStore",DatabaseEngine="SQLite",ServerName="../../SupportingData/Political-Counties/db/counties.db")
# Use the following for troubleshooting.
#ReadTableFromDataStore(DataStore="CountyDatabase",DataStoreTable="county_pop_estimate_dola",TableID="county_pop_estimate_dola")
#===================================================================
#
# Get the unique list of counties to use in loops.
ReadTableFromDataStore(DataStore="CountyDatabase",Sql="SELECT * FROM county_dola ORDER BY county",TableID="CountyListTable")
# Get the unique list of municipalities to use in loops (from OWF dataset).
# - add a FIPS_ID_int as integer to be able to join with DOLA FIPS ID, which does not have leading zeros.
ReadTableFromDelimitedFile(TableID="MunicipalityList_OWF_Table",InputFile="../../SupportingData/Municipal-Municipalities/downloads/municipalities-owf.csv",HeaderLines="1",IntegerColumns="NumCounty,Num_IBCC_Basin",TextColumns="FIPS_ID,GNIS_ID",RowCountProperty="MunicipalityList_OWF_Table_RowCount")
ManipulateTableString(TableID="MunicipalityList_OWF_Table",InputColumn1="FIPS_ID",Operator="ToInteger",OutputColumn="FIPS_ID_int")
#===================================================================
#
# Get the unique list of municipalities to use in loops.
# - counties have placefips=0 and unincorporated areas have 'Unincorp' in municipalityname
# - some municipalities are in more than one county and have '(Total)' in the name, so remove
# - some municipalities have the same name as counties so filter out
# - because of possible numerous differenes in municipality name spelling,
#   join on FIPS ID, but need to format consistently in both.
# - Johnstown and Thornton are the only municipality with odd data.
#   For example, Johnstown has Johnstown and Johnstown (Total) beause it grew into 2 counties.
#   Eliminate extra rows by copying the table and adding values when constructing the time series.
# - Remove "Bonza City", which is the same as "Bonanza City" because it shares the same 'placefips'
#   and therefore when time series are queried below its records show up for "Bonanza City".
# - Remove "Massa", which is the same as "Manassa City" because it shares the same 'placefips'
#   and therefore when time series are queried below its records show up for "Manassa".
# - Leave Carbonate in the dataset since it is on the map, but it will have no time series
#   since DOLA does not have any data.
ReadTableFromDataStore(DataStore="CountyDatabase",Sql="SELECT DISTINCT municipalityname, placefips FROM county_pop_estimate_dola WHERE ((placefips != 0) AND (municipalityname NOT LIKE '%Unincorp%') AND (municipalityname NOT LIKE '%Part%') AND (municipalityname NOT LIKE '%COUNTY%')) ORDER BY municipalityname",TableID="MunicipalityList_DOLA_Table0")
ManipulateTableString(TableID="MunicipalityList_DOLA_Table0",InputColumn1="municipalityname",Operator="Remove",InputValue2="\s(Total)",OutputColumn="dola_municipality")
DeleteTableRows(TableID="MunicipalityList_DOLA_Table0",Condition="municipalityname == Bonza City")
DeleteTableRows(TableID="MunicipalityList_DOLA_Table0",Condition="municipalityname == Massa")
CopyTable(TableID="MunicipalityList_DOLA_Table0",NewTableID="MunicipalityList_DOLA_Table",DistinctColumns="dola_municipality")
# Join to OWF municipality list that additional inforamtion such as OWF_ID_Full can be used
# - if the result is not 272 rows (length of OWF dataset), warn
JoinTables(TableID="MunicipalityList_DOLA_Table",TableToJoinID="MunicipalityList_OWF_Table",JoinColumns="placefips:FIPS_ID_int",JoinMethod=JoinIfInBoth,HandleMultipleJoinMatchesHow=UseLastMatch,RowCountProperty="MunicipalityJoinRowCount")
SetProperty(PropertyName="MunicipalityList_OWF_Table_RowCount_Minus1",PropertyType=Integer,PropertyValue="${MunicipalityList_OWF_Table_RowCount}",Subtract="1")
# Add County_CSV_NoSpace column for use below
ManipulateTableString(TableID="MunicipalityList_DOLA_Table",InputColumn1="County_CSV",Operator="Remove",InputValue2="\s",OutputColumn="County_CSV_NoSpace")
If(Name="If_MunicipalityJoinCount",Condition="${MunicipalityJoinRowCount} != ${MunicipalityList_OWF_Table_RowCount_Minus1}")
Message(Message="DOLA and OWF municipality datasets do not align. Expect ${MunicipalityList_OWF_Table_RowCount_Minus1} matches from OWF dataset size.  Found ${MunicipalityJoinRowCount}.",CommandStatus=WARNING)
EndIf(Name="If_MunicipalityJoinCount")
#===================================================================
#
# Read the previously-generated county time series from DateValue files.
#
For(Name="For_County_Total",IteratorProperty="county_no_space",TableID="CountyListTable",TableColumn="county_no_space")
ReadDateValue(InputFile="${SupportingDataCountiesTsFolder}/County_${county_no_space}.DOLA.Population-Total.Year.dv")
EndFor(Name="For_County_Total")
#===================================================================
#
# Read the previously-generated municipality time series from DateValue files.
#
For(Name="For_Muni_Total",IteratorProperty="dola_municipality",TableID="MunicipalityList_DOLA_Table",TableColumn="dola_municipality",TablePropertyMap="OWF_ID_Full:OWF_ID_Full,placefips:placefips")
ReadDateValue(InputFile="${SupportingDataMunicipalitiesTsFolder}/Muni_${OWF_ID_Full}.DOLA.Population-Total.Year.dv")
EndFor(Name="For_Muni_Total")
#===================================================================
#
# Loop through municipal time series and parts and compute the fraction of county population.
# - fill these time series into the forecast period
# - therefore the latest historical fraction value will be forecast into the future
# - each time series has "County" property that is used to lookup the county population
#
For(Name="For_Muni_CountyFraction",IteratorProperty="dola_municipality",TableID="MunicipalityList_DOLA_Table",TableColumn="dola_municipality",TablePropertyMap="OWF_ID_Full:OWF_ID_Full,placefips:placefips,County_CSV_NoSpace:County_CSV_NoSpace,NumCounty:NumCounty")
SetPropertyFromTimeSeries(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-Muni-Population-Total",PropertyName="CountyNum",PropertyValue="${ts:CountyNum}")
If(Name="If_OneCounty",Condition="${CountyNum} == 1",CompareAsStrings="True")
#
# Process municipality where there is only one county involved
# Copy the original time series
Copy(TSID="${OWF_ID_Full}-Muni-Population-Total",NewTSID="Muni:${OWF_ID_Full}.DOLA.Population-CountyFraction.Year",Alias="${OWF_ID_Full}-Muni-Population-CountyFraction",CopyHistory=False)
# Divide the copy by the county population to get fraction
SetPropertyFromTimeSeries(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-Muni-Population-Total",PropertyName="County",PropertyValue="${ts:County}")
Divide(TSID="${OWF_ID_Full}-Muni-Population-CountyFraction",DivisorTSID="${County}-County-Population-Total",NewUnits="fraction")
# Fill the fraction part to 2050 (${EndYear}) since it is being held constant for the population forecast
ChangePeriod(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-Muni-Population-CountyFraction",NewEnd="${EndYear}")
FillRepeat(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-Muni-Population-CountyFraction",FillDirection=Forward)
# Calculate the forecasted time series as the county forecast multiplied by the county fraction for the municipality
NewTimeSeries(Alias="${OWF_ID_Full}-Muni-Population-Forecast-Baseline",NewTSID="Muni:${OWF_ID_Full}.Model.Population-Forecast.Year.Baseline",Description="${OWF_ID_Full} municipality population forecast",SetStart="${ForecastStartYear}",SetEnd="${EndYear}",Units="persons",MissingValue=NaN)
SetFromTS(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-Muni-Population-Forecast-Baseline",IndependentTSList=AllMatchingTSID,IndependentTSID="${County}-County-Population-Total",TransferHow=ByDateTime)
Multiply(TSID="${OWF_ID_Full}-Muni-Population-Forecast-Baseline",MultiplierTSID="${OWF_ID_Full}-Muni-Population-CountyFraction",NewUnits="persons")
# Create a new time series for muni population for the scenario so original data from DOLA is not changed
# - set from the original
# - period will not include any forecast
NewTimeSeries(Alias="${OWF_ID_Full}-Muni-Population-Total-Baseline",NewTSID="Muni:${OWF_ID_Full}.Model.Population-Total.Year.Baseline",Description="${OWF_ID_Full} municipality total population, baseline scenario",SetStart="${StartYear}",SetEnd="${EndYear}",Units="persons",MissingValue=NaN)
SetFromTS(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-Muni-Population-Total-Baseline",IndependentTSList=AllMatchingTSID,IndependentTSID="${OWF_ID_Full}-Muni-Population-Total",SetStart="${StartYear}",SetEnd="${HistEndYear}",TransferHow=ByDateTime)
SetFromTS(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-Muni-Population-Total-Baseline",IndependentTSList=AllMatchingTSID,IndependentTSID="${OWF_ID_Full}-Muni-Population-Forecast-Baseline",SetStart="${ForecastStartYear}",SetEnd="${EndYear}",TransferHow=ByDateTime)
# Write the full time series and forecast to files
# - for now only write the full muni but can output parts if needed
# Total population (historical and forecast)
SetTimeSeriesProperty(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-Muni-Population-Total-Baseline",PropertyName="County",PropertyType=String,PropertyValue="${County_CSV_NoSpace}")
SetTimeSeriesProperty(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-Muni-Population-Total-Baseline",PropertyName="CountyNum",PropertyType=String,PropertyValue="${NumCounty}")
SetTimeSeriesProperty(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-Muni-Population-Total-Baseline",PropertyName="County_CSV_NoSpace",PropertyType=String,PropertyValue="${County_CSV_NoSpace}")
WriteDelimitedFile(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-Muni-Population-Total-Baseline",OutputFile="${BaselineScenarioMunicipalityPopulationTsFolder}/Muni_${OWF_ID_Full}.Model.Population-Total.Year.Baseline.csv",DateTimeColumn="year",ValueColumns="population",Precision=0)
WriteDateValue(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-Muni-Population-Total-Baseline",OutputFile="${BaselineScenarioMunicipalityPopulationTsFolder}/Muni_${OWF_ID_Full}.Model.Population-Total.Year.Baseline.dv",Precision=0,IncludeProperties="County,CountyNum,County_CSV_NoSpace")
# Forecast population only
SetTimeSeriesProperty(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-Muni-Population-Forecast-Baseline",PropertyName="County",PropertyType=String,PropertyValue="${County_CSV_NoSpace}")
SetTimeSeriesProperty(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-Muni-Population-Forecast-Baseline",PropertyName="CountyNum",PropertyType=String,PropertyValue="${NumCounty}")
SetTimeSeriesProperty(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-Muni-Population-Forecast-Baseline",PropertyName="County_CSV_NoSpace",PropertyType=String,PropertyValue="${County_CSV_NoSpace}")
WriteDelimitedFile(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-Muni-Population-Forecast-Baseline",OutputFile="${BaselineScenarioMunicipalityPopulationTsFolder}/Muni_${OWF_ID_Full}.Model.Population-Forecast.Year.Baseline.csv",DateTimeColumn="year",ValueColumns="population",Precision=0)
WriteDateValue(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-Muni-Population-Forecast-Baseline",OutputFile="${BaselineScenarioMunicipalityPopulationTsFolder}/Muni_${OWF_ID_Full}.Model.Population-Forecast.Year.Baseline.dv",Precision=0,IncludeProperties="County,CountyNum,County_CSV_NoSpace")
EndIf(Name="If_OneCounty")
#
# Similar to above for municipalities that have parts in multiple counties
# - loop through the counties for the municipality
# - LocType is MuniPart and County is for the part
If(Name="If_MoreThanOneCounty",Condition="${CountyNum} > 1",CompareAsStrings="True")
#
# Process municipality where there is more than one county involved
# - the total time series has County_CSV_NoSpace listing all counties, which can be used for iteration
SetPropertyFromTimeSeries(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-Muni-Population-Total",PropertyName="County_CSV_NoSpace",PropertyValue="${ts:County_CSV_NoSpace}")
Message(Message="Muni counties ${County_CSV_NoSpace} value is: ${County_CSV_NoSpace}")
# Use a property to track the parts being processsd
SetProperty(PropertyName="PartCount",PropertyType=Integer,PropertyValue="0")
For(Name="For_MuniParts",IteratorProperty="CountyForMuni",List="${County_CSV_NoSpace}")
# Read the previously generated MuniPart time series
Message(Message="Processing Muni:${OWF_ID_Full} part: ${CountyForMuni}")
# - did not read previously because have not dealt with parts until here
SetProperty(PropertyName="PartCount",PropertyType=Integer,PropertyValue="${PartCount}",Add="1")
ReadDateValue(InputFile="${SupportingDataMunicipalitiesTsFolder}/MuniPart_${OWF_ID_Full}-${CountyForMuni}.DOLA.Population-Total.Year.dv")
# Copy the original time series
Copy(TSID="${OWF_ID_Full}-${CountyForMuni}-MuniPart-Population-Total",NewTSID="MuniPart:${OWF_ID_Full}-${CountyForMuni}.DOLA.Population-CountyFraction.Year",Alias="${OWF_ID_Full}-${CountyForMuni}-MuniPart-Population-CountyFraction",CopyHistory=False)
# Divide the copy by the county population to get fraction
Divide(TSID="${OWF_ID_Full}-${CountyForMuni}-MuniPart-Population-CountyFraction",DivisorTSID="${CountyForMuni}-County-Population-Total",NewUnits="fraction")
# Fill the fraction part to 2050 (${EndYear}) since it is being held constant for the population forecast
ChangePeriod(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-${CountyForMuni}-MuniPart-Population-CountyFraction",NewEnd="${EndYear}")
# Special case for Broomfield county parts since Broomfield is a new county in 2000 DOLA population data
# - set all other county parts to 0 before filling
# - the following does not need to be done now because it is handled in SupportingData
If(Name="If_Broomfield_Municipality",Condition="${OWF_ID_Full} == Broomfield")
If(Name="If_Broomfield_County",Condition="${CountyForMuni} == Broomfield")
# Part that is in Broomfield county
# - all values 1980 (${StartYear}) to 1999 are missing because can't divide by zero county population
# - need to set that to zero and then part after that to the total
SetConstant(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-${CountyForMuni}-MuniPart-Population-CountyFraction",ConstantValue=0,SetStart="${StartYear}",SetEnd="1999")
EndIf(Name="If_Broomfield_County")
# # If(Name="If_NotBroomfield_County",Condition="${CountyForMuni} != Broomfield")
# # # Parts that are not in Broomfield county
# # # - last year of data is 1999, set a zero in 2000 so it will fill forward below
# # SetDataValue(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-${CountyForMuni}-MuniPart-Population-CountyFraction",SetDateTime="2000",NewValue=0)
# # # Make sure years start in 1980 (${StartYear}) and are filled with zero
# # # - seems to only be an issue for Broomfield and Weld county, although Weld population is only a few people
# # # - TODO smalers 2020-11-01 need a way to fill constant or repeat only at start of period
# # ChangePeriod(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-${CountyForMuni}-MuniPart-Population-CountyFraction",NewStart="${StartYear}")
# # FillConstant(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-${CountyForMuni}-MuniPart-Population-CountyFraction",ConstantValue=0,FillStart="${StartYear}",FillEnd="1984")
# # EndIf(Name="If_NotBroomfield_County")
EndIf(Name="If_Broomfield_Municipality")
FillRepeat(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-${CountyForMuni}-MuniPart-Population-CountyFraction",FillDirection=Forward)
# Calculate the forecasted time series as the county forecast multiplied by the county part fraction for the municipality
NewTimeSeries(Alias="${OWF_ID_Full}-${CountyForMuni}-MuniPart-Population-Forecast-Baseline",NewTSID="MuniPart:${OWF_ID_Full}-${CountyForMuni}.Model.Population-Forecast.Year.Baseline",Description="${OWF_ID_Full}-${CountyForMuni} municipality population forecast",SetStart="${ForecastStartYear}",SetEnd="${EndYear}",Units="persons",MissingValue=NaN)
SetFromTS(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-${CountyForMuni}-MuniPart-Population-Forecast-Baseline",IndependentTSList=AllMatchingTSID,IndependentTSID="${CountyForMuni}-County-Population-Total",TransferHow=ByDateTime)
Multiply(TSID="${OWF_ID_Full}-${CountyForMuni}-MuniPart-Population-Forecast-Baseline",MultiplierTSID="${OWF_ID_Full}-${CountyForMuni}-MuniPart-Population-CountyFraction",NewUnits="persons")
# Don't change the original time series - do that below as a scenario
#ChangePeriod(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-${CountyForMuni}-MuniPart-Population-Total",NewEnd="${EndYear}")
#SetFromTS(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-${CountyForMuni}-MuniPart-Population-Total",IndependentTSList=AllMatchingTSID,IndependentTSID="${OWF_ID_Full}-${CountyForMuni}-MuniPart-Population-Forecast",SetStart="${ForecastStartYear}",SetEnd="${EndYear}",TransferHow=ByDateTime)
# Create and increment the total for a municipality from parts in multiple counties:
# - initialize with the first part
# - then add each additional part
If(Name="If_PartCount1",Condition="${PartCount} == 1")
#Copy(TSID="${OWF_ID_Full}-${CountyForMuni}-MuniPart-Population-Total",NewTSID="MuniPart:${OWF_ID_Full}-PartTotal.DOLA.Population-Total.Year.Baseline",Alias="${OWF_ID_Full}-Muni-Population-Total-Baseline")
#Copy(TSID="${OWF_ID_Full}-${CountyForMuni}-MuniPart-Population-Forecast",NewTSID="MuniPart:${OWF_ID_Full}-PartTotal.DOLA.Population-Forecast.Year.Baseline",Alias="${OWF_ID_Full}-Muni-Population-Forecast-Baseline")
# Total
# - copy from original total for the municipality (this assumes that parts will add to the total)
NewTimeSeries(Alias="${OWF_ID_Full}-Muni-Population-Total-Baseline",NewTSID="Muni:${OWF_ID_Full}.Model.Population-Total.Year.Baseline",Description="${OWF_ID_Full} municipality total population (historical and forecast)",SetStart="${StartYear}",SetEnd="${EndYear}",Units="persons",MissingValue=NaN)
SetFromTS(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-Muni-Population-Total-Baseline",IndependentTSList=AllMatchingTSID,IndependentTSID="${OWF_ID_Full}-Muni-Population-Total",SetStart="${StartYear}",SetEnd="${HistEndYear}",TransferHow=ByDateTime)
SetFromTS(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-Muni-Population-Total-Baseline",IndependentTSList=AllMatchingTSID,IndependentTSID="${OWF_ID_Full}-${CountyForMuni}-MuniPart-Population-Forecast-Baseline",SetStart="${ForecastStartYear}",SetEnd="${EndYear}",TransferHow=ByDateTime)
# Forecast - initialize to first part
NewTimeSeries(Alias="${OWF_ID_Full}-Muni-Population-Forecast-Baseline",NewTSID="Muni:${OWF_ID_Full}.Model.Population-Forecast.Year.Baseline",Description="${OWF_ID_Full} municipality total population (forecast only)",SetStart="${ForecastStartYear}",SetEnd="${EndYear}",Units="persons",MissingValue=NaN)
SetFromTS(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-Muni-Population-Forecast-Baseline",IndependentTSList=AllMatchingTSID,IndependentTSID="${OWF_ID_Full}-${CountyForMuni}-MuniPart-Population-Forecast-Baseline",SetStart="${ForecastStartYear}",SetEnd="${EndYear}",TransferHow=ByDateTime)
EndIf(Name="If_PartCount1")
If(Name="If_PartCount2",Condition="${PartCount} > 1")
# Only need to add the forecast, but add to the full time series and the forecast
Add(TSID="${OWF_ID_Full}-Muni-Population-Total-Baseline",AddTSList=AllMatchingTSID,AddTSID="${OWF_ID_Full}-${CountyForMuni}-MuniPart-Population-Forecast-Baseline",HandleMissingHow="IgnoreMissing",AnalysisStart="${ForecastStartYear}",AnalysisEnd="${EndYear}")
Add(TSID="${OWF_ID_Full}-Muni-Population-Forecast-Baseline",AddTSList=AllMatchingTSID,AddTSID="${OWF_ID_Full}-${CountyForMuni}-MuniPart-Population-Forecast-Baseline",HandleMissingHow="IgnoreMissing",AnalysisStart="${ForecastStartYear}",AnalysisEnd="${EndYear}")
EndIf(Name="If_PartCount2")
EndFor(Name="For_MuniParts")
# Write the full time series and forecast to files
# - similar to for municipalities in one county but can't output a single county name
# - for now only write the full muni but can output parts if needed
# - can't write a single 'County' but do output 'County_CSV_NoSpace' as information
# Total population (historical and forecast)
SetTimeSeriesProperty(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-Muni-Population-Total-Baseline",PropertyName="CountyNum",PropertyType=String,PropertyValue="${NumCounty}")
SetTimeSeriesProperty(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-Muni-Population-Total-Baseline",PropertyName="County_CSV_NoSpace",PropertyType=String,PropertyValue="${County_CSV_NoSpace}")
WriteDelimitedFile(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-Muni-Population-Total-Baseline",OutputFile="${BaselineScenarioMunicipalityPopulationTsFolder}/Muni_${OWF_ID_Full}.Model.Population-Total.Year.Baseline.csv",DateTimeColumn="year",ValueColumns="population",Precision=0)
WriteDateValue(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-Muni-Population-Total-Baseline",OutputFile="${BaselineScenarioMunicipalityPopulationTsFolder}/Muni_${OWF_ID_Full}.Model.Population-Total.Year.Baseline.dv",Precision=0,IncludeProperties="County,CountyNum,County_CSV_NoSpace")
# Forecast population only
SetTimeSeriesProperty(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-Muni-Population-Forecast-Baseline",PropertyName="CountyNum",PropertyType=String,PropertyValue="${NumCounty}")
SetTimeSeriesProperty(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-Muni-Population-Forecast-Baseline",PropertyName="County_CSV_NoSpace",PropertyType=String,PropertyValue="${County_CSV_NoSpace}")
WriteDelimitedFile(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-Muni-Population-Forecast-Baseline",OutputFile="${BaselineScenarioMunicipalityPopulationTsFolder}/Muni_${OWF_ID_Full}.Model.Population-Forecast.Year.Baseline.csv",DateTimeColumn="year",ValueColumns="population",Precision=0)
WriteDateValue(TSList=AllMatchingTSID,TSID="${OWF_ID_Full}-Muni-Population-Forecast-Baseline",OutputFile="${BaselineScenarioMunicipalityPopulationTsFolder}/Muni_${OWF_ID_Full}.Model.Population-Forecast.Year.Baseline.dv",Precision=0,IncludeProperties="County,CountyNum,County_CSV_NoSpace")
EndIf(Name="If_MoreThanOneCounty")
EndFor(Name="For_Muni_CountyFraction")
#===================================================================
#
# Create graph template for use with InfoMapper
# - only need to do this once
# - use La Junta municipality as the example
ProcessTSProduct(TSProductFile="graphs/municipality-population-graph-config.tsp",View=True,OutputFile="graphs/municipality-population-graph-prototype.png",OutputProductFile="graphs/municipality-population-graph-config-prototype.json",OutputProductFormat="JSON")
# Copy the prototype to the final name for further editing below
CopyFile(InputFile="graphs/municipality-population-graph-config-prototype.json",OutputFile="graphs/municipality-population-graph-config.json",IfInputNotFound=Warn)
#
# Convert the prototype graph into a template by replacing strings with ${Property} notation
# - convert prototype 'SwinkNoSpace' to property that can be filled by InfoMapper - attribute without space, for files
# - convert prototype 'Swink' to property that can be filled by InfoMapper - attribute as is, for title
# Front part of TSID and TSAlias
TextEdit(InputFile="graphs/municipality-population-graph-config.json",SearchFor="Swink-",ReplaceWith="\${featureAttribute:MunicipalityName}.toMixedCase().replace(' ','')-",OutputFile="graphs/municipality-population-graph-config.json")
TextEdit(InputFile="graphs/municipality-population-graph-config.json",SearchFor="Swink\.",ReplaceWith="\${featureAttribute:MunicipalityName}.toMixedCase().replace(' ','').",OutputFile="graphs/municipality-population-graph-config.json")
# Edit TSID file paths
# - first part of the string will have been replaced above
# - final step corrects a replace from previous steps
TextEdit(InputFile="graphs/municipality-population-graph-config.json",SearchFor="Population-Total.Year.Baseline",ReplaceWith="Population-Total\.Year.Baseline~dv~ts/Muni_\$\{featureAttribute:MunicipalityName}.toMixedCase().replace(' ','')\.Model\.Population-Total\.Year\.Baseline\.dv",OutputFile="graphs/municipality-population-graph-config.json")
TextEdit(InputFile="graphs/municipality-population-graph-config.json",SearchFor="Population-Forecast.Year.Baseline",ReplaceWith="Population-Forecast\.Year.Baseline~dv~ts/Muni_\$\{featureAttribute:MunicipalityName}.toMixedCase().replace(' ','')\.Model\.Population-Forecast\.Year\.Baseline\.dv",OutputFile="graphs/municipality-population-graph-config.json")
# Edit remaining municipality name, such as title
TextEdit(InputFile="graphs/municipality-population-graph-config.json",SearchFor="Swink",ReplaceWith="\${featureAttribute:MunicipalityName}.toMixedCase()",OutputFile="graphs/municipality-population-graph-config.json")
